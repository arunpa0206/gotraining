// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: hello-service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//message Hello
type Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *Hello) Reset() {
	*x = Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hello_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hello) ProtoMessage() {}

func (x *Hello) ProtoReflect() protoreflect.Message {
	mi := &file_hello_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hello.ProtoReflect.Descriptor instead.
func (*Hello) Descriptor() ([]byte, []int) {
	return file_hello_service_proto_rawDescGZIP(), []int{0}
}

func (x *Hello) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Hello) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

//Hello Request
type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hello *Hello `protobuf:"bytes,1,opt,name=hello,proto3" json:"hello,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hello_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hello_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_hello_service_proto_rawDescGZIP(), []int{1}
}

func (x *HelloRequest) GetHello() *Hello {
	if x != nil {
		return x.Hello
	}
	return nil
}

//Hello Request
type HelloRequestMultipleTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hello *Hello `protobuf:"bytes,1,opt,name=hello,proto3" json:"hello,omitempty"`
}

func (x *HelloRequestMultipleTimes) Reset() {
	*x = HelloRequestMultipleTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hello_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequestMultipleTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequestMultipleTimes) ProtoMessage() {}

func (x *HelloRequestMultipleTimes) ProtoReflect() protoreflect.Message {
	mi := &file_hello_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequestMultipleTimes.ProtoReflect.Descriptor instead.
func (*HelloRequestMultipleTimes) Descriptor() ([]byte, []int) {
	return file_hello_service_proto_rawDescGZIP(), []int{2}
}

func (x *HelloRequestMultipleTimes) GetHello() *Hello {
	if x != nil {
		return x.Hello
	}
	return nil
}

//Hello Response
type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hello_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hello_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_hello_service_proto_rawDescGZIP(), []int{3}
}

func (x *HelloResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

//Hello Response
type HelloResponseMultipleTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *HelloResponseMultipleTimes) Reset() {
	*x = HelloResponseMultipleTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hello_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponseMultipleTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponseMultipleTimes) ProtoMessage() {}

func (x *HelloResponseMultipleTimes) ProtoReflect() protoreflect.Message {
	mi := &file_hello_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponseMultipleTimes.ProtoReflect.Descriptor instead.
func (*HelloResponseMultipleTimes) Descriptor() ([]byte, []int) {
	return file_hello_service_proto_rawDescGZIP(), []int{4}
}

func (x *HelloResponseMultipleTimes) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_hello_service_proto protoreflect.FileDescriptor

var file_hello_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x43, 0x0a, 0x05, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x30, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x05, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x22, 0x3d, 0x0a, 0x19, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x22, 0x27, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x34, 0x0a, 0x1a, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0xd7, 0x02, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x0d, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x17, 0x53, 0x61,
	0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x51, 0x0a,
	0x17, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x67, 0x0a, 0x1e, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x42, 0x69, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x05, 0x5a, 0x03, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hello_service_proto_rawDescOnce sync.Once
	file_hello_service_proto_rawDescData = file_hello_service_proto_rawDesc
)

func file_hello_service_proto_rawDescGZIP() []byte {
	file_hello_service_proto_rawDescOnce.Do(func() {
		file_hello_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_hello_service_proto_rawDescData)
	})
	return file_hello_service_proto_rawDescData
}

var file_hello_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_hello_service_proto_goTypes = []interface{}{
	(*Hello)(nil),                      // 0: api.Hello
	(*HelloRequest)(nil),               // 1: api.HelloRequest
	(*HelloRequestMultipleTimes)(nil),  // 2: api.HelloRequestMultipleTimes
	(*HelloResponse)(nil),              // 3: api.HelloResponse
	(*HelloResponseMultipleTimes)(nil), // 4: api.HelloResponseMultipleTimes
}
var file_hello_service_proto_depIdxs = []int32{
	0, // 0: api.HelloRequest.hello:type_name -> api.Hello
	0, // 1: api.HelloRequestMultipleTimes.hello:type_name -> api.Hello
	1, // 2: api.HelloService.SayHelloUnary:input_type -> api.HelloRequest
	2, // 3: api.HelloService.SayHelloClientStreaming:input_type -> api.HelloRequestMultipleTimes
	1, // 4: api.HelloService.SayHelloServerStreaming:input_type -> api.HelloRequest
	2, // 5: api.HelloService.SayHelloBidirectionalStreaming:input_type -> api.HelloRequestMultipleTimes
	3, // 6: api.HelloService.SayHelloUnary:output_type -> api.HelloResponse
	3, // 7: api.HelloService.SayHelloClientStreaming:output_type -> api.HelloResponse
	4, // 8: api.HelloService.SayHelloServerStreaming:output_type -> api.HelloResponseMultipleTimes
	4, // 9: api.HelloService.SayHelloBidirectionalStreaming:output_type -> api.HelloResponseMultipleTimes
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_hello_service_proto_init() }
func file_hello_service_proto_init() {
	if File_hello_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hello_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hello_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hello_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequestMultipleTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hello_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hello_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponseMultipleTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hello_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hello_service_proto_goTypes,
		DependencyIndexes: file_hello_service_proto_depIdxs,
		MessageInfos:      file_hello_service_proto_msgTypes,
	}.Build()
	File_hello_service_proto = out.File
	file_hello_service_proto_rawDesc = nil
	file_hello_service_proto_goTypes = nil
	file_hello_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloServiceClient interface {
	// Unary
	SayHelloUnary(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	//Client Streaming RPC
	SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloService_SayHelloClientStreamingClient, error)
	//Server Streaming RPC
	SayHelloServerStreaming(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloService_SayHelloServerStreamingClient, error)
	//Bidirectional Streaming RPC
	SayHelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloService_SayHelloBidirectionalStreamingClient, error)
}

type helloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloServiceClient(cc grpc.ClientConnInterface) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) SayHelloUnary(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/api.HelloService/SayHelloUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloService_SayHelloClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[0], "/api.HelloService/SayHelloClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceSayHelloClientStreamingClient{stream}
	return x, nil
}

type HelloService_SayHelloClientStreamingClient interface {
	Send(*HelloRequestMultipleTimes) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceSayHelloClientStreamingClient struct {
	grpc.ClientStream
}

func (x *helloServiceSayHelloClientStreamingClient) Send(m *HelloRequestMultipleTimes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceSayHelloClientStreamingClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) SayHelloServerStreaming(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloService_SayHelloServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[1], "/api.HelloService/SayHelloServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceSayHelloServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloService_SayHelloServerStreamingClient interface {
	Recv() (*HelloResponseMultipleTimes, error)
	grpc.ClientStream
}

type helloServiceSayHelloServerStreamingClient struct {
	grpc.ClientStream
}

func (x *helloServiceSayHelloServerStreamingClient) Recv() (*HelloResponseMultipleTimes, error) {
	m := new(HelloResponseMultipleTimes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) SayHelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloService_SayHelloBidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[2], "/api.HelloService/SayHelloBidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceSayHelloBidirectionalStreamingClient{stream}
	return x, nil
}

type HelloService_SayHelloBidirectionalStreamingClient interface {
	Send(*HelloRequestMultipleTimes) error
	Recv() (*HelloResponseMultipleTimes, error)
	grpc.ClientStream
}

type helloServiceSayHelloBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *helloServiceSayHelloBidirectionalStreamingClient) Send(m *HelloRequestMultipleTimes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceSayHelloBidirectionalStreamingClient) Recv() (*HelloResponseMultipleTimes, error) {
	m := new(HelloResponseMultipleTimes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServiceServer is the server API for HelloService service.
type HelloServiceServer interface {
	// Unary
	SayHelloUnary(context.Context, *HelloRequest) (*HelloResponse, error)
	//Client Streaming RPC
	SayHelloClientStreaming(HelloService_SayHelloClientStreamingServer) error
	//Server Streaming RPC
	SayHelloServerStreaming(*HelloRequest, HelloService_SayHelloServerStreamingServer) error
	//Bidirectional Streaming RPC
	SayHelloBidirectionalStreaming(HelloService_SayHelloBidirectionalStreamingServer) error
}

// UnimplementedHelloServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServiceServer struct {
}

func (*UnimplementedHelloServiceServer) SayHelloUnary(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloUnary not implemented")
}
func (*UnimplementedHelloServiceServer) SayHelloClientStreaming(HelloService_SayHelloClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloClientStreaming not implemented")
}
func (*UnimplementedHelloServiceServer) SayHelloServerStreaming(*HelloRequest, HelloService_SayHelloServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStreaming not implemented")
}
func (*UnimplementedHelloServiceServer) SayHelloBidirectionalStreaming(HelloService_SayHelloBidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBidirectionalStreaming not implemented")
}

func RegisterHelloServiceServer(s *grpc.Server, srv HelloServiceServer) {
	s.RegisterService(&_HelloService_serviceDesc, srv)
}

func _HelloService_SayHelloUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).SayHelloUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.HelloService/SayHelloUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).SayHelloUnary(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_SayHelloClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).SayHelloClientStreaming(&helloServiceSayHelloClientStreamingServer{stream})
}

type HelloService_SayHelloClientStreamingServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequestMultipleTimes, error)
	grpc.ServerStream
}

type helloServiceSayHelloClientStreamingServer struct {
	grpc.ServerStream
}

func (x *helloServiceSayHelloClientStreamingServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceSayHelloClientStreamingServer) Recv() (*HelloRequestMultipleTimes, error) {
	m := new(HelloRequestMultipleTimes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloService_SayHelloServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServiceServer).SayHelloServerStreaming(m, &helloServiceSayHelloServerStreamingServer{stream})
}

type HelloService_SayHelloServerStreamingServer interface {
	Send(*HelloResponseMultipleTimes) error
	grpc.ServerStream
}

type helloServiceSayHelloServerStreamingServer struct {
	grpc.ServerStream
}

func (x *helloServiceSayHelloServerStreamingServer) Send(m *HelloResponseMultipleTimes) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloService_SayHelloBidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).SayHelloBidirectionalStreaming(&helloServiceSayHelloBidirectionalStreamingServer{stream})
}

type HelloService_SayHelloBidirectionalStreamingServer interface {
	Send(*HelloResponseMultipleTimes) error
	Recv() (*HelloRequestMultipleTimes, error)
	grpc.ServerStream
}

type helloServiceSayHelloBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *helloServiceSayHelloBidirectionalStreamingServer) Send(m *HelloResponseMultipleTimes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceSayHelloBidirectionalStreamingServer) Recv() (*HelloRequestMultipleTimes, error) {
	m := new(HelloRequestMultipleTimes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloUnary",
			Handler:    _HelloService_SayHelloUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloClientStreaming",
			Handler:       _HelloService_SayHelloClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloServerStreaming",
			Handler:       _HelloService_SayHelloServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloBidirectionalStreaming",
			Handler:       _HelloService_SayHelloBidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello-service.proto",
}
